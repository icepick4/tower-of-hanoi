/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./2d/drag-and-drop/src/constants.ts":
/*!*******************************************!*\
  !*** ./2d/drag-and-drop/src/constants.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"BTN_PLAY\": () => (/* binding */ BTN_PLAY),\n/* harmony export */   \"CANCEL\": () => (/* binding */ CANCEL),\n/* harmony export */   \"DROP_AREAS\": () => (/* binding */ DROP_AREAS),\n/* harmony export */   \"INPUT\": () => (/* binding */ INPUT),\n/* harmony export */   \"TOWERS\": () => (/* binding */ TOWERS),\n/* harmony export */   \"TOWERS_AREAS\": () => (/* binding */ TOWERS_AREAS),\n/* harmony export */   \"WON\": () => (/* binding */ WON)\n/* harmony export */ });\nconst INPUT = document.querySelector('input');\nconst WON = document.getElementById('won');\nconst BTN_PLAY = document.getElementById('play');\nconst TOWER0 = document.getElementById('pic0');\nconst TOWER1 = document.getElementById('pic1');\nconst TOWER2 = document.getElementById('pic2');\nconst TOWERS = [TOWER0, TOWER1, TOWER2];\nconst TOWER_AREA0 = document.getElementById('pic-area-0');\nconst TOWER_AREA1 = document.getElementById('pic-area-1');\nconst TOWER_AREA2 = document.getElementById('pic-area-2');\nconst TOWERS_AREAS = [TOWER_AREA0, TOWER_AREA1, TOWER_AREA2];\nTOWER_AREA0.style.width = (document.body.clientWidth / 50).toString() + 'px';\nTOWER_AREA1.style.width = (document.body.clientWidth / 50).toString() + 'px';\nTOWER_AREA2.style.width = (document.body.clientWidth / 50).toString() + 'px';\nconst DROP_AREA0 = document.getElementById('DROP-AREA-0');\nconst DROP_AREA1 = document.getElementById('DROP-AREA-1');\nconst DROP_AREA2 = document.getElementById('DROP-AREA-2');\nconst DROP_AREAS = [DROP_AREA0, DROP_AREA1, DROP_AREA2];\nconst CANCEL = document.getElementById('cancel');\n\n\n//# sourceURL=webpack://tower-of-hanoi/./2d/drag-and-drop/src/constants.ts?");

/***/ }),

/***/ "./2d/drag-and-drop/src/main.ts":
/*!**************************************!*\
  !*** ./2d/drag-and-drop/src/main.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants */ \"./2d/drag-and-drop/src/constants.ts\");\n/* eslint-disable no-unused-vars */\n\nlet startDragCol;\nlet startDragDisk;\n_constants__WEBPACK_IMPORTED_MODULE_0__.BTN_PLAY.addEventListener('click', play);\n_constants__WEBPACK_IMPORTED_MODULE_0__.CANCEL.addEventListener('click', cancelLastMove);\n// event listener on resize window\nwindow.addEventListener('resize', function () {\n    if (hanoi != null) {\n        hanoi.draw();\n    }\n    for (let i = 0; i < _constants__WEBPACK_IMPORTED_MODULE_0__.TOWERS_AREAS.length; i++) {\n        _constants__WEBPACK_IMPORTED_MODULE_0__.TOWERS_AREAS[i].style.width =\n            (document.body.clientWidth / 50).toString() + 'px';\n    }\n});\n// event on opening devtools\nwindow.addEventListener('click', function () {\n    if (hanoi != null) {\n        hanoi.draw();\n    }\n});\n/**\n * This function adds event listeners to the first tower's children and the drop areas.\n */\nfunction setEvents() {\n    for (let i = 0; i < _constants__WEBPACK_IMPORTED_MODULE_0__.TOWERS[0].children.length; i++) {\n        _constants__WEBPACK_IMPORTED_MODULE_0__.TOWERS[0].children[i].addEventListener('dragstart', handleDragStart);\n        _constants__WEBPACK_IMPORTED_MODULE_0__.TOWERS[0].children[i].addEventListener('dragend', handleDragEnd);\n    }\n    for (let i = 0; i < _constants__WEBPACK_IMPORTED_MODULE_0__.DROP_AREAS.length; i++) {\n        _constants__WEBPACK_IMPORTED_MODULE_0__.DROP_AREAS[i].addEventListener('dragover', allowDrop);\n        _constants__WEBPACK_IMPORTED_MODULE_0__.DROP_AREAS[i].addEventListener('drop', drop);\n    }\n}\n/**\n * \"If the user is dragging a disk, and the mouse is over a tower, and the disk is at the top of the\n * tower, and the disk can be moved to the tower, then highlight the tower.\"\n *\n * The function is called whenever the mouse moves.\n *\n * The first thing it does is check if the user is dragging a disk. If not, it returns.\n *\n * The next thing it does is get the tower the mouse is over. If the mouse is not over a tower, it\n * returns.\n *\n * The next thing it does is check if the disk is at the top of the tower. If not, it returns.\n *\n * The next thing it does is check if the disk can be moved to the tower. If not, it returns.\n *\n * If the user is dragging a disk, and the mouse is over a tower, and the disk is\n * @param {DragEvent} ev - DragEvent - the event that is being handled\n */\nfunction allowDrop(ev) {\n    ev.preventDefault();\n    const diskAtTop = hanoi.towers[startDragCol][hanoi.towers[startDragCol].length - 1] ===\n        startDragDisk;\n    // get the tower we are over\n    if (ev.target != null) {\n        // get id\n        const id = ev.target.id;\n        // id equald last char of id\n        const col = Number(id.substring(id.length - 1));\n        for (let i = 0; i < _constants__WEBPACK_IMPORTED_MODULE_0__.TOWERS_AREAS.length; i++) {\n            if (_constants__WEBPACK_IMPORTED_MODULE_0__.TOWERS_AREAS[i].id === 'pic-area-' + col.toString() &&\n                hanoi.can_move(startDragCol, i) &&\n                diskAtTop) {\n                _constants__WEBPACK_IMPORTED_MODULE_0__.TOWERS_AREAS[i].style.backgroundColor = 'purple';\n            }\n            else {\n                _constants__WEBPACK_IMPORTED_MODULE_0__.TOWERS_AREAS[i].style.backgroundColor = 'black';\n            }\n        }\n    }\n}\n/**\n * The function drop() is called when the user drops a disk on a tower.\n *\n * The function first prevents the default action of the browser from happening.\n *\n * Then it gets the id of the tower where the disk was dropped.\n *\n * Then it calls the move() function to move the disk to the tower.\n *\n * Finally, it changes the background color of the towers back to black.\n * @param {DragEvent} ev - DragEvent - the event that is triggered when the user drags the element.\n */\nfunction drop(ev) {\n    ev.preventDefault();\n    // get the id of the pic where we drop\n    if (ev.target != null) {\n        const id = ev.target.id;\n        const col = Number(id.substring(id.length - 1));\n        move(col);\n    }\n    for (let i = 0; i < _constants__WEBPACK_IMPORTED_MODULE_0__.TOWERS_AREAS.length; i++) {\n        _constants__WEBPACK_IMPORTED_MODULE_0__.TOWERS_AREAS[i].style.backgroundColor = 'black';\n    }\n}\n/**\n * \"When a disk is clicked, set the opacity to 0.75, set the border to dashed, and set the startDragCol\n * and startDragDisk variables to the column and disk that was clicked.\"\n *\n * The first line of the function is a TypeScript annotation. It tells TypeScript that the this\n * parameter is of type HTMLElement. This is necessary because the this parameter is not a parameter of\n * the function, but rather a parameter of the addEventListener function.\n *\n * The next line sets the opacity of the disk to 0.75. This is done so that the user can see which disk\n * is being dragged.\n *\n * The next line sets the border of the disk to dashed. This is done so that the user can see which\n * disk is being dragged.\n *\n * The next line gets the disk number from the id of the disk. The id of the disk is in the form\n * \"disk1\", \"\n * @param {HTMLElement}  - this: HTMLElement - this is the element that is being dragged.\n */\nfunction handleDragStart() {\n    this.style.opacity = '0.75';\n    this.style.border = '1px dashed #000';\n    const disk = Number(this.id.substring(this.id.length - 1));\n    for (let i = 0; i < 3; i++) {\n        for (let j = 0; j < hanoi.towers[i].length; j++) {\n            if (hanoi.towers[i][j] === disk) {\n                startDragCol = i;\n                startDragDisk = disk;\n                break;\n            }\n        }\n    }\n}\n/**\n * The function `handleDragEnd` takes a parameter `this` of type `HTMLElement` and returns nothing\n * @param {HTMLElement}  - The element that is being dragged.\n */\nfunction handleDragEnd() {\n    this.style.opacity = '1';\n    this.style.border = '1px solid #000';\n}\n/**\n * If the user is dragging a disk and the disk is at the top of the tower, then move the disk to the\n * new tower\n * @param {number} col - The column to move the disk to.\n */\nfunction move(col) {\n    const diskAtTop = hanoi.towers[startDragCol][hanoi.towers[startDragCol].length - 1] ===\n        startDragDisk;\n    if (hanoi.can_move(startDragCol, col) && diskAtTop && !hanoi.solved) {\n        hanoi.move(startDragCol, col, false);\n        hanoi.draw();\n    }\n}\n/**\n * If there are moves to cancel and there are moves to cancel, cancel the last move.\n */\nfunction cancelLastMove() {\n    if (hanoi.moves > 0 && hanoi.lastsMoves.length > 0) {\n        console.log('cancel');\n        hanoi.moves--;\n        hanoi.cancelLastMove();\n        hanoi.draw();\n    }\n}\n/**\n * `removeDiskFromPic` removes the last child of the given `pic` and returns it\n * @param {HTMLElement} pic - The picture element that the disk is being removed from.\n * @returns The disk that was removed from the pic.\n */\nfunction removeDiskFromPic(pic) {\n    const disk = pic.lastChild;\n    pic.removeChild(disk);\n    return disk;\n}\n/**\n * It creates a new Hanoi object, and then calls the draw function on it.\n */\nfunction play() {\n    _constants__WEBPACK_IMPORTED_MODULE_0__.WON.style.display = 'block';\n    // clear divs\n    for (let i = 0; i < _constants__WEBPACK_IMPORTED_MODULE_0__.TOWERS.length; i++) {\n        _constants__WEBPACK_IMPORTED_MODULE_0__.TOWERS[i].innerHTML = '';\n    }\n    _constants__WEBPACK_IMPORTED_MODULE_0__.WON.innerHTML = 'Moves : 0';\n    if (_constants__WEBPACK_IMPORTED_MODULE_0__.INPUT != null) {\n        const n = Number(_constants__WEBPACK_IMPORTED_MODULE_0__.INPUT.value);\n        if (n > 0 && n <= 12) {\n            hanoi = new Hanoi(n);\n            hanoi.draw();\n        }\n    }\n    setEvents();\n}\n/* The Hanoi class is a class that represents a Hanoi game. It has a constructor that takes a number of\ndisks as a parameter and creates a Hanoi game with that number of disks. It also has a method called\nmove that takes two numbers as parameters and moves the top disk from the first tower to the second\ntower. It also has a method called draw that draws the disks on the screen. */\nclass Hanoi {\n    n;\n    towers;\n    moves;\n    solved;\n    lastsMoves;\n    constructor(n) {\n        this.n = n;\n        this.towers = [];\n        for (let i = 0; i < 3; i++) {\n            const diskArray = [];\n            this.towers.push(diskArray);\n        }\n        for (let i = 0; i < this.n; i++) {\n            this.towers[0].push(this.n - i);\n            // i into string\n            const str = (this.n - i).toString();\n            // create a new div with id disk_i\n            const div = document.createElement('div');\n            _constants__WEBPACK_IMPORTED_MODULE_0__.TOWERS[0].appendChild(initDiv(div, n, i, str));\n        }\n        this.moves = 0;\n        this.solved = false;\n        this.lastsMoves = [];\n    }\n    can_move(from, to) {\n        if (this.towers[from].length === 0) {\n            return false;\n        }\n        else if (this.towers[to].length === 0) {\n            return true;\n        }\n        else {\n            return (this.towers[from][this.towers[from].length - 1] <\n                this.towers[to][this.towers[to].length - 1]);\n        }\n    }\n    cancelLastMove() {\n        if (this.lastsMoves.length > 0) {\n            const lastMove = this.lastsMoves.pop();\n            if (lastMove != null) {\n                if (!this.solved) {\n                    this.move(lastMove[1], lastMove[0], true);\n                }\n            }\n        }\n        this.draw();\n        _constants__WEBPACK_IMPORTED_MODULE_0__.CANCEL.classList.remove('over-underline');\n        _constants__WEBPACK_IMPORTED_MODULE_0__.CANCEL.classList.add('grey');\n    }\n    move(from, to, revert) {\n        // remove the last child in the pic number from\n        const lastChild = removeDiskFromPic(_constants__WEBPACK_IMPORTED_MODULE_0__.TOWERS[from]);\n        _constants__WEBPACK_IMPORTED_MODULE_0__.TOWERS[to].appendChild(lastChild);\n        this.towers[to].push(this.towers[from].pop());\n        if (!revert) {\n            this.lastsMoves.push([from, to]);\n            if (this.lastsMoves.length > 1) {\n                this.lastsMoves.shift();\n            }\n            if (this.lastsMoves.length > 0) {\n                _constants__WEBPACK_IMPORTED_MODULE_0__.CANCEL.classList.add('over-underline');\n                _constants__WEBPACK_IMPORTED_MODULE_0__.CANCEL.classList.remove('grey');\n            }\n            this.moves++;\n        }\n        if (this.towers[2].length === this.n) {\n            this.solved = true;\n            // display #won\n            _constants__WEBPACK_IMPORTED_MODULE_0__.WON.innerHTML = 'You won in ' + this.moves.toString() + ' moves!';\n            this.moves = 0;\n        }\n        if (this.moves !== 0) {\n            _constants__WEBPACK_IMPORTED_MODULE_0__.WON.innerHTML = 'Moves : ' + this.moves.toString();\n        }\n    }\n    draw() {\n        // draw the disks on the lines\n        for (let i = 0; i < 3; i++) {\n            for (let j = 0; j < this.towers[i].length; j++) {\n                const div = document.getElementById('disk_' + this.towers[i][j].toString());\n                div.style.bottom =\n                    ((j * document.body.clientWidth) / 33.333 +\n                        30 -\n                        10).toString() + 'px';\n                div.style.width =\n                    ((document.body.clientWidth * this.towers[i][j]) / 25 +\n                        10).toString() + 'px';\n                div.style.height =\n                    (document.body.clientWidth / 33.333).toString() + 'px';\n                if (i === 0) {\n                    div.style.left =\n                        (document.body.clientWidth / 6 -\n                            div.offsetWidth / 2 +\n                            _constants__WEBPACK_IMPORTED_MODULE_0__.TOWERS_AREAS[0].offsetWidth / 2).toString() + 'px';\n                }\n                else if (i === 1) {\n                    div.style.left =\n                        (document.body.clientWidth / 2 -\n                            div.offsetWidth / 2 +\n                            _constants__WEBPACK_IMPORTED_MODULE_0__.TOWERS_AREAS[1].offsetWidth / 2).toString() + 'px';\n                }\n                else {\n                    div.style.left =\n                        (document.body.clientWidth / 1.25 -\n                            div.offsetWidth / 2 +\n                            _constants__WEBPACK_IMPORTED_MODULE_0__.TOWERS_AREAS[2].offsetWidth / 2).toString() + 'px';\n                }\n            }\n        }\n    }\n}\nfunction initDiv(div, n, i, str) {\n    div.id = 'disk_' + str;\n    // random color for fillStyle\n    const r = Math.floor(Math.random() * 255);\n    const g = Math.floor(Math.random() * 255);\n    const b = Math.floor(Math.random() * 255);\n    div.style.backgroundColor =\n        'rgb(' + r.toString() + ', ' + g.toString() + ', ' + b.toString() + ')';\n    div.style.border = '1px solid black';\n    div.style.width =\n        ((document.body.clientWidth * (n - 1)) / 25 + 10).toString() + 'px';\n    div.style.height = (document.body.clientWidth / 33.333).toString() + 'px';\n    div.style.position = 'absolute';\n    div.draggable = true;\n    div.style.cursor = 'move';\n    div.style.bottom = (i * 45 + 30 - 10).toString() + 'px';\n    div.style.left = (screen.width / 6 - (n - i) * 30 + 2.5).toString() + 'px';\n    div.style.zIndex = '2';\n    return div;\n}\nlet hanoi;\n\n\n//# sourceURL=webpack://tower-of-hanoi/./2d/drag-and-drop/src/main.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./2d/drag-and-drop/src/main.ts");
/******/ 	
/******/ })()
;